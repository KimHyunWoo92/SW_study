/*
-- CHAPTER 07. DML(DATA Manipulation Language)

DML은 데이터 조작어로 테이블에 데이터를 조회, 추가, 수정, 삭제 할때 사용하는 질의어이다.

SELECT 데이터 조회
INSERT 데이터 추가
UPDATE 데이터 수정
DELETE 데이터 삭제

INSERT INTO 테이블명(컬럼1, 컬럼2,....)

VALUES(값1,값2,....)

INSERT INTO 에 입력한 컬럼과 VALUES에 입력한 값1, 값2는 1:1 매핑 되기때문에, 순서와
자료형에 맞게 입력해야 함

INSERT INTO 테이블명()

VALUES(입력값)
컬럼을 생략하는 경우, 

-- 사용방법 1)
--INSERT INTO 테이블 명(컬럼1, 컬럼2,...)
--VALUES (값1,값2,....)

-- 사용방법 2)
--INSERT INTO
-- VALUES (값,....)
-- 칼럼리스트 생략시 VALUES에 입력한 값은 해당 테이블의 컬럼 순서와 자료형에 맞게 입력해야함.

*/

--1. MEMBER_JOIN 테이블에 나의 정보 넣기

INSERT INTO MEMBER_JOIN (MEMBER_ID,MEMBER_PW,MEMBER_NAME,MEMBER_DATE,MEMBER_AGE,MEMBER_TEL,MEMBER_EMAIL)
VALUES ('SMHRD01','12345','김현우',SYSDATE,33,'010-1234-5678','rlagusdn@email.com') ;

SELECT * FROM MEMBER_JOIN ;

--2. MEMBER_JOIN 테이블에 나의 친구의 정보를 넣기 (전화번호와 이메일은 NULL값으로 입력)
--명시적으로 NULL값을 입력하는 방법
INSERT INTO MEMBER_JOIN(MEMBER_ID,MEMBER_PW,MEMBER_NAME,MEMBER_DATE,MEMBER_AGE,MEMBER_TEL,MEMBER_EMAIL)
VALUES ('SMHRD02','23456','가나다',SYSDATE,30,NULL,'') ;

SELECT * FROM MEMBER_JOIN ;

--3. MEMBER_JOIN테이블에 나의 친구의 정보 넣기 (전화번호와 이메일은 NULL값으로 입력)
-- NULL값을 암시적으로 입력하는 방법
INSERT INTO MEMBER_JOIN(MEMBER_ID,MEMBER_PW,MEMBER_NAME,MEMBER_DATE,MEMBER_AGE)
VALUES ('SMHRD03','34567','마바사',SYSDATE,30) ;

SELECT * FROM MEMBER_JOIN ;



-- [테이블 생성시 에러 리스트 ]

-- 1. 컬럼리스트와 입력 값의 개수가 다른 경우
INSERT INTO MEMBER_JOIN (MEMBER_ID, MEMBER_PW, MEMBER_NAME, MEMBER_DATE, MEMBER_AGE, MEMBER_TEL, MEMBER_EMAIL)
VALUES ('호두아빠', '33333', '박병관' , SYSDATE, 29, '010-111-1111', 'HODO@GMAIL.COM', 'N');

SELECT * FROM MEMBER_JOIN ; 
--  SQL 오류: ORA-00913: too many values 
--> 컬럼 리스트의 갯수와 입력 값 개수는 일치해야 한다!

-- 2. 식별자에 NULL을 입력한 경우
INSERT INTO MEMBER_JOIN (MEMBER_ID, MEMBER_PW, MEMBER_NAME, MEMBER_DATE, MEMBER_AGE, MEMBER_TEL, MEMBER_EMAIL)
 VALUES (NULL, '33333', '박병관' , SYSDATE, 29, '010-111-1111', 'HODO@GMAIL.COM');

-- ORA-01400: cannot insert NULL into ("HR"."SMHRD_JOIN"."ID")
--> 컬럼에 대한 제약조건에 맞게 작성 해야함 (식별자는 NOT NULL + UNIQUE 중복불가)

-- 3. NOT NULL인 컬럼에 NULL을 넣은 경우
INSERT INTO MEMBER_JOIN (MEMBER_ID, MEMBER_PW, MEMBER_NAME, MEMBER_DATE, MEMBER_AGE, MEMBER_TEL, MEMBER_EMAIL)
 VALUES ('호두아빠', '33333', NULL , SYSDATE, 29, '010-111-1111', 'HODO@GMAIL.COM');

-- ORA-01400: cannot insert NULL into ("HR"."SMHRD_JOIN"."NAME")
--> 컬럼에 대한 제약조건에 맞게 작성 해야함 ( NOT NULL 조건 )

-- 4. 자료형에 맞지 않게 입력 값을 넣은 경우
INSERT INTO MEMBER_JOIN (MEMBER_ID, MEMBER_PW, MEMBER_NAME, MEMBER_DATE, MEMBER_AGE, MEMBER_TEL, MEMBER_EMAIL)
 VALUES ('호두아빠', '33333', '박병관' , SYSDATE, '29살', '010-111-1111', 'HODO@GMAIL.COM');

-- ORA-01722: invalid number
--> 컬럼에 대한 자료형에 맞게 작성이 되야 한다. (AGE는 숫자형 자료형)

-- 5. 식별자 컬럼에 중복 값을 넣을 려는 경우
INSERT INTO MEMBER_JOIN (MEMBER_ID, MEMBER_PW, MEMBER_NAME, MEMBER_DATE, MEMBER_AGE, MEMBER_TEL, MEMBER_EMAIL)
 VALUES ('호두아빠', '33333', '박병관' , SYSDATE, 29, '010-111-1111', 'HODO@GMAIL.COM');
 
-- unique constraint (HR.SYS_C007110) violated
--> 값이 들어간 상태에서 한번더 실행이 되면 식별자가 값이 중복이 되서 에러가 남

CREATE TABLE HY_SONGLIST (
    NO      NUMBER(3),
    TITLE   VARCHAR2(20),
    SINGER  VARCHAR2(20),
    GENDER  VARCHAR2(10),
    
    CONSTRAINT NO_PK PRIMARY KEY(NO),
    CONSTRAINT NOT_NULL_TITLE CHECK(TITLE IS NOT NULL),
    CONSTRAINT GENDER_MW CHECK(GENDER = '남자' OR GENDER = '여자')
) ;

INSERT INTO HY_SONGLIST(NO,TITLE,SINGER,GENDER)
VALUES (1,'개똥벌레','신형원','여자');

INSERT INTO HY_SONGLIST(NO,TITLE,SINGER,GENDER)
VALUES(2,'RAINDROP','아이유','여자');

INSERT INTO HY_SONGLIST(NO,TITLE,SINGER,GENDER)
VALUES(3,'캔디','HOT',NULL) ;

SELECT * FROM HY_SONGLIST ;


-- UNIQUE CONSTRAINT (HR.SYS_C007110)

-- 컬럼 리스트를 쓰지 않고 INSERT를 하는 방법

SELECT * FROM MEMBER_JOIN ;

INSERT INTO MEMBER_JOIN
VALUES ('SMHRD04',22222,'이명훈',SYSDATE,24,'010-2222-2222','ABCE@NAVER.COM') ;

SELECT * FROM MEMBER_JOIN ;


-- UPDATE : 테이블의 데이터를 변경하고 싶을때 사용

-- 사용방법
-- UPDATE 테이블 명
-- SET 변경할 컬럼 - 변경할데이터 ,...
-- WHERE 데이터를 변경할 대상 행을 선별하기 위한 조건 ;
-- *** WHERE 조건절을 생략할 경우 테이블 내 저자오딘 모든 컬럼의 데이터가 변경이 된다.

SELECT * FROM MEMBER_JOIN ;

-- 가나다의 정보를 수정

UPDATE MEMBER_JOIN
SET MEMBER_AGE = 33
WHERE MEMBER_NAME = '가나다' ;

UPDATE MEMBER_JOIN
SET MEMBER_TEL = '2345-5678' , MEMBER_EMAIL = 'RANADA@NAVER.COM'
WHERE MEMBER_ID = 'SMHRD02' ;

-- DELETE : 데이터를 삭제할 때 사용하는 명령어

-- 사용방법
-- DELETE FROM 테이블 명
-- WHERE 삭제할 대상 행을 선별하기 위한 조건식 ;
-- *** WHERE 조건절을 생략할 경우 테이블의 모든 데이터가 삭제된다.

-- 30살 이하인 회원들의 정보 삭제

SELECT * FROM MEMBER_JOIN ;

DELETE FROM MEMBER_JOIN
WHERE MEMBER_AGE <= 30 ;

SELECT * FROM MEMBER_JOIN ;



















