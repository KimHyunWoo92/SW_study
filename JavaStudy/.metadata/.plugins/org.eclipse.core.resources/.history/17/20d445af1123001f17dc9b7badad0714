package Contoller;

import java.sql.Array;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;

import Model.MemberDTO;

public class MemberDAO {
	
	// Data Access Objcet : 데이터에 접근하는 것을 도와주는 객체
	// DB와 연결해서 INSERT, DELETE, UPDATE, SELECT 하는 코드들의 모음
	// 메소드 형태로 코드 작성
	
	// 필드
	private Connection conn = null;
	private PreparedStatement psmt = null;
	private ResultSet rs = null;
	
	// 공통으로 사용할 메소드
	// DB연결 메소드
	
	private void getConn() {
		try{
			Class.forName("oracle.jdbc.driver.OracleDriver");
			String url = "jdbc:oracle:thin:@localhost:1521:xe";
			String user = "hr";
			String password = "12345";
			
			conn = DriverManager.getConnection(url, user, password);
		}catch (Exception e) {
			e.printStackTrace();
		}
	}
	
	
	
	// 1. 회원가입 메소드
	public int join(MemberDTO dto) {
		
		int row = 0;
		
		try {
						
			// 3. Query문 전송
			// 1) Query문 작성
			String sql = "INSERT INTO SWCAMPMEMBER VALUES (?,?,?,?,?)";
			
			// ? 인자
			// : 사용자로부터 어떤 데이터가 들어올지 모를 때 사용
			// : 지정한 데이터 공간만큼
			
			psmt = conn.prepareStatement(sql);
			// --> 전송하기 전에 sql문을 담아서 전송할 수 있는 형식으로 변경
			
			// ? 인자 입력작업
			// 데이터 바인딩 작업
			psmt.setString(1, dto.getId());
			psmt.setString(2, dto.getPw());
			psmt.setString(3, dto.getName());
			psmt.setInt(4, dto.getAge());
			psmt.setInt(5, dto.getScore());
			
			
			// 4. sql구문 실행
			row = psmt.executeUpdate();
			
			// 5. 결과를 이용한 작업처리
			// : 사용자에게 어떤 모습을 보여줄건지 정의
			if (row>0) {
				System.out.println("회원가입 성공");
			}else {
				System.out.println("회원가입 실패");
			}
			
			} catch (Exception e) {			
				e.printStackTrace();
				
			} finally {
				try {
					if (psmt != null)
						psmt.close();
					if (conn != null)
						conn.close();
			
				}catch (SQLException e) {
					e.printStackTrace();
				}
			}
			return row;
		}
	// 2.로그인
	public String login(MemberDTO dto) {
		
		String uName = null;
		
		try {
			// 1.드라이버 로딩
			Class.forName("oracle.jdbc.driver.OracleDriver");
			
			// 2. DB연결통로 열기(url,user,password)
			String url = "jdbc:oracle:thin:@localhost:1521:xe";
			String user = "hr";
			String password = "12345";
			
			conn = DriverManager.getConnection(url, user, password);
			
			// 3. sql문 준비
			// 로그인 : 테이블에 데이터가 존재하는 지 확인 >> select
			// 아이디, 비밀번호가 일치하는 데이터의 모든 컬럼을 가져오기!
			String sql = "SELECT * FROM SWCAMPMEMBER WHERE ID = ? AND PW = ?";
			
			psmt = conn.prepareStatement(sql);
			
			// ? 인자  채워주기
			psmt.setString(1, dto.getId());
			psmt.setString(2, dto.getPw());
			
			// 4. sql구문 전송
			rs = psmt.executeQuery();
			
			if (rs.next()) {
				// 로그인이 성공했다면,
				// 이름(name)을 받아온다
				uName = rs.getString("name");				
			}
			// 데이터가 있다면 true, 없다면 false 
			
			
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			// 5. DM연결 종료
			// 열어준 순서의 반대
			try {
				if (rs != null) 
					rs.close();
				if (psmt != null)
					psmt.close();
				if (conn != null)
					conn.close();
				
			} catch (SQLException e) {
				e.printStackTrace();
			}
		}return uName;
	}
	// 3. 회원 탈퇴
	public int delete(MemberDTO dto) {
		
		int row = 0;
		
		try {
			Class.forName("oracle.jdbc.driver.OracleDriver");
			
			// 2. DB연결통로 열기(url,user,password)
			String url = "jdbc:oracle:thin:@localhost:1521:xe";
			String user = "hr";
			String password = "12345";
			
			conn = DriverManager.getConnection(url, user, password);
			
			String sql = "DELETE FROM SWCAMPMEMBER WHERE ID = ? AND PW = ?";
			
			psmt = conn.prepareStatement(sql);
			
			
			// ? 인자  채워주기
			psmt.setString(1,dto.getId());
			psmt.setString(2,dto.getPw());
			
			
			row = psmt.executeUpdate();
			
			}catch (Exception e) {
				e.printStackTrace();
			}finally {
				// 5. DM연결 종료
				// 열어준 순서의 반대
				try {
				
					if (psmt != null)
						psmt.close();
					if (conn != null)
						conn.close();
					
				} catch (SQLException e) {
					
					e.printStackTrace();
				}
			}
		return row;
	
		
	
	} // delete 끝나는 부분
	

	// 4. 전체 회원 정보(강사님)
	
	public ArrayList<MemberDTO> selectAll(){
//	 
		
		MemberDTO dto = null;
		ArrayList<MemberDTO> list = new ArrayList<MemberDTO>();
	
		try {
			// 1.드라이버 로딩
			Class.forName("oracle.jdbc.driver.OracleDriver");
			
			// 2. DB연결통로 열기(url,user,password)
			String url = "jdbc:oracle:thin:@localhost:1521:xe";
			String user = "hr";
			String password = "12345";
			
			conn = DriverManager.getConnection(url, user, password);
			
			
//			
//			// 3. sql문 준비
//			// 로그인 : 테이블에 데이터가 존재하는 지 확인 >> select
//			// 아이디, 비밀번호가 일치하는 데이터의 모든 컬럼을 가져오기!
			String sql = "SELECT * FROM SWCAMPMEMBER";
//			
			psmt = conn.prepareStatement(sql);
//			
//			
//			// 4. sql구문 전송
			rs = psmt.executeQuery();
//			
			
			while (rs.next()) {
				String id = rs.getString("id");
				String name = rs.getString("name");
				int age = rs.getInt("age");
				int score = rs.getInt("score");
	
				dto = new MemberDTO(id, "", name, age, score); //id,name,age,score
				list.add(dto);
				}
			}catch (Exception e) {
				e.printStackTrace();
			}finally {
				// 5. DM연결 종료
				// 열어준 순서의 반대
				try {
					if (rs != null) 
						rs.close();
					if (psmt != null)
						psmt.close();
					if (conn != null)
						conn.close();
					
				} catch (SQLException e) {
					
					e.printStackTrace();
				}
				
			}return list;	
		}
	 
	 
	
	
	
	// 5. 회원 정보 수정
	public int update(MemberDTO dto) {
		
		int row = 0;
		
		
		try {		
			Class.forName("oracle.jdbc.driver.OracleDriver");
			
			// 2. DB연결통로 열기(url,user,password)
			String url = "jdbc:oracle:thin:@localhost:1521:xe";
			String user = "hr";
			String password = "12345";
			
			conn = DriverManager.getConnection(url, user, password);
			
			String sql = "UPDATE SWCAMPMEMBER SET score = ? WHERE ID = ? AND PW = ?";
			
			psmt = conn.prepareStatement(sql);
			
			psmt.setInt(1, dto.getVal());
			
			psmt.setString(2, dto.getId());
			psmt.setString(3, dto.getPw());
			
			
			row = psmt.executeUpdate();

			}catch (Exception e) {
				e.printStackTrace();
			}finally {
				// 5. DM연결 종료
				// 열어준 순서의 반대
				try {
				
					if (psmt != null)
						
						psmt.close();
					if (conn != null)
						conn.close();
					
				} catch (SQLException e) {
					
					e.printStackTrace();
				}
			}return row;
		}
	
	
	
	
	
	
}
